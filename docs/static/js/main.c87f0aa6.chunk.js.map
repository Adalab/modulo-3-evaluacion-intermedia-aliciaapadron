{"version":3,"sources":["services/api.js","components/App.js","index.js"],"names":["callToApi","fetch","then","response","json","map","phrase","quote","character","App","useState","data","setData","search","setSearch","select","setSelect","newQuote","setNewQuote","useEffect","handleNewQuote","ev","target","id","value","htmlData","filter","toLowerCase","includes","i","className","htmlFor","autoComplete","type","name","onChange","placeholder","onClick","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"sMAwBeA,G,MAvBG,WAGhB,OAAOC,MACL,mGAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAYL,OAPeA,EAASE,KAAI,SAACC,GAC3B,MAAO,CACLC,MAAOD,EAAOC,MACdC,UAAWF,EAAOE,mB,OCgHbC,EA5HH,WAEV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAgCN,mBAAS,CACvCH,MAAO,GACPC,UAAW,KAFb,mBAAOS,EAAP,KAAiBC,EAAjB,KAKAC,qBAAU,WACRnB,IAAYE,MAAK,SAACC,GAChBS,EAAQT,QAET,IAEH,IAMMiB,EAAiB,SAACC,GACtBH,EAAY,2BACPD,GADM,kBAERI,EAAGC,OAAOC,GAAKF,EAAGC,OAAOE,UAYxBC,EAAWd,EACde,QACC,SAACpB,GAAD,OACEA,EAAOC,MAAMoB,cAAcC,SAASf,EAAOc,gBAC3CrB,EAAOE,UAAUmB,cAAcC,SAASf,EAAOc,kBAElDD,QACC,SAACpB,GAAD,OACEA,EAAOC,MAAMqB,SAASb,IAAWT,EAAOE,UAAUoB,SAASb,MAE9DV,KAAI,SAACC,EAAQuB,GACZ,OACE,oBAAIC,UAAU,eAAd,SACE,oBAAGA,UAAU,eAAb,UACGxB,EAAOC,MADV,IACkBD,EAAOE,cAFOqB,MAOxC,OACE,sBAAKC,UAAU,OAAf,UAEE,yBAAQA,UAAU,SAAlB,UACE,oBAAIA,UAAU,gBAAd,+BACA,iCACE,uBAAOC,QAAQ,OAAf,8BACA,uBACED,UAAU,iBACVE,aAAa,MACbC,KAAK,SACLC,KAAK,SACLC,SApDW,SAACd,GACpBP,EAAUO,EAAGC,OAAOE,QAoDZA,MAAOX,IAET,uBAAOkB,QAAQ,OAAf,kCACA,yBAAQG,KAAK,GAAGX,GAAG,GAAGY,SArDT,SAACd,GACpBL,EAAUK,EAAGC,OAAOE,QAoDgCA,MAAOT,EAArD,UACE,wBAAQS,MAAM,GAAd,mBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,uBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,SAAd,6BAKN,iCAEE,oBAAIM,UAAU,eAAd,SAA8BL,IAG9B,uBAAMK,UAAU,mBAAhB,UACE,oBAAIA,UAAU,oBAAd,sCACA,uBAAOC,QAAQ,OAAf,mBACA,uBACED,UAAU,oBACVG,KAAK,OACLC,KAAK,QACLX,GAAG,QACHa,YAAY,QACZD,SAAUf,EACVI,MAAOP,EAASV,QAElB,uBAAOwB,QAAQ,OAAf,uBACA,uBACED,UAAU,oBACVG,KAAK,OACLC,KAAK,YACLX,GAAG,YACHa,YAAY,YACZD,SAAUf,EACVI,MAAOP,EAAST,YAElB,uBAAOuB,QAAQ,OAAf,uCACA,uBACED,UAAU,mBACVG,KAAK,SACLT,MAAM,YACNa,QAxFU,SAAChB,GACnBA,EAAGiB,iBACH1B,EAAQ,GAAD,mBAAKD,GAAL,CAAWM,KAClBC,EAAY,CACVX,MAAO,GACPC,UAAW,kBCjCjB+B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c87f0aa6.chunk.js","sourcesContent":["// Fichero src/services/api.js\nconst callToApi = () => {\n  // Recibimos por parámetros searchName, que nos lo pasan desde App dentro del useEffect\n  // Llamamos al fetch interpolando la URL de la API más el nombre buscado\n  return fetch(\n    'https://beta.adalab.es/curso-intensivo-fullstack-recursos/apis/quotes-friends-tv-v1/quotes.json'\n  )\n    .then((response) => response.json())\n    .then((response) => {\n      // La respuesta de la API es un objeto que dentro tiene la propiedad results, que es un array\n      // Recorremos el array results obteniendo solo el nombre\n      // Esto lo hacemos para limpiar la respuesta de la API antes de devolverla al componente App\n      // Esto es opcional pero recomendado\n      const result = response.map((phrase) => {\n        return {\n          quote: phrase.quote,\n          character: phrase.character,\n        };\n      });\n      // Retornamos los resultados de la API al componente App\n      return result;\n    });\n};\n\nexport default callToApi;\n","import '../styles/App.scss';\nimport { useEffect, useState } from 'react';\nimport callToApi from '../services/api';\n\nconst App = () => {\n  //variables de estado\n  const [data, setData] = useState([]);\n  const [search, setSearch] = useState('');\n  const [select, setSelect] = useState('');\n  const [newQuote, setNewQuote] = useState({\n    quote: '',\n    character: '',\n  });\n  //llamo a la Api\n  useEffect(() => {\n    callToApi().then((response) => {\n      setData(response);\n    });\n  }, []);\n  //funciones handle\n  const handleSearch = (ev) => {\n    setSearch(ev.target.value);\n  };\n  const handleSelect = (ev) => {\n    setSelect(ev.target.value);\n  };\n  const handleNewQuote = (ev) => {\n    setNewQuote({\n      ...newQuote,\n      [ev.target.id]: ev.target.value,\n    });\n  };\n  const handleClick = (ev) => {\n    ev.preventDefault();\n    setData([...data, newQuote]);\n    setNewQuote({\n      quote: '',\n      character: '',\n    });\n  };\n\n  const htmlData = data\n    .filter(\n      (phrase) =>\n        phrase.quote.toLowerCase().includes(search.toLowerCase()) ||\n        phrase.character.toLowerCase().includes(search.toLowerCase())\n    )\n    .filter(\n      (phrase) =>\n        phrase.quote.includes(select) || phrase.character.includes(select)\n    )\n    .map((phrase, i) => {\n      return (\n        <li className=\"phrase__item\" key={i}>\n          <p className=\"phrase__name\">\n            {phrase.quote}-{phrase.character}\n          </p>\n        </li>\n      );\n    });\n  return (\n    <div className=\"page\">\n      {/* header */}\n      <header className=\"header\">\n        <h1 className=\"header__title\">Frases de Friends</h1>\n        <form>\n          <label htmlFor=\"text\">Filtar por frase</label>\n          <input\n            className=\"header__search\"\n            autoComplete=\"off\"\n            type=\"search\"\n            name=\"search\"\n            onChange={handleSearch}\n            value={search}\n          />\n          <label htmlFor=\"text\">Filtar por personaje</label>\n          <select name=\"\" id=\"\" onChange={handleSelect} value={select}>\n            <option value=\"\">Todos</option>\n            <option value=\"Ross\">Ross</option>\n            <option value=\"Monica\">Mónica</option>\n            <option value=\"Joey\">Joey</option>\n            <option value=\"Phoebe\">Phoebe</option>\n            <option value=\"Chandler\">Chandler</option>\n            <option value=\"Rachel\">Rachel</option>\n          </select>\n        </form>\n      </header>\n\n      <main>\n        {/* phrase list */}\n        <ul className=\"phrase__list\">{htmlData}</ul>\n\n        {/* new phrase */}\n        <form className=\"new-phrase__form\">\n          <h2 className=\"new-phrase__title\">Añade una nueva frase</h2>\n          <label htmlFor=\"text\">Frase</label>\n          <input\n            className=\"new-phrase__input\"\n            type=\"text\"\n            name=\"quote\"\n            id=\"quote\"\n            placeholder=\"Frase\"\n            onChange={handleNewQuote}\n            value={newQuote.quote}\n          />\n          <label htmlFor=\"text\">Personaje</label>\n          <input\n            className=\"new-phrase__input\"\n            type=\"text\"\n            name=\"character\"\n            id=\"character\"\n            placeholder=\"Personaje\"\n            onChange={handleNewQuote}\n            value={newQuote.character}\n          />\n          <label htmlFor=\"text\">Añadir una nueva frase</label>\n          <input\n            className=\"new-contact__btn\"\n            type=\"submit\"\n            value=\"Añadir\"\n            onClick={handleClick}\n          />\n        </form>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}